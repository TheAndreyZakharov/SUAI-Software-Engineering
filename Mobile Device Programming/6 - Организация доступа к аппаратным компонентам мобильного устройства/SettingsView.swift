//
//  SettingsView.swift
//  Laba
//
//  Created by –ê–Ω–¥—Ä–µ–π –ó–∞—Ö–∞—Ä–æ–≤ on 07.03.2024.
//

import SwiftUI
import AVFoundation

struct SettingsView: View {
    @State private var showingImagePicker = false
    @State private var inputImage: UIImage?
    @State private var avatarImage: Image?
    @State var firstName = "–ê–Ω–¥—Ä–µ–π"
    @State var lastName = "–ó–∞—Ö–∞—Ä–æ–≤"
    
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                Text("üîß")
                    .font(.largeTitle)
                    .padding(.top, 20)
                Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
                    .font(.title)
                    .padding()
                
                avatarSection
                Spacer(minLength: 20)

                Group {
                    HStack {
                        Text("–ò–º—è:")
                            .frame(width: 80, alignment: .leading)
                        TextField("–í–≤–µ–¥–∏—Ç–µ –∏–º—è", text: $firstName)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                    }
                    
                    HStack {
                        Text("–§–∞–º–∏–ª–∏—è:")
                            .frame(width: 80, alignment: .leading)
                        TextField("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é", text: $lastName)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                    }
                }
                .frame(maxWidth: .infinity)
                .padding([.leading, .trailing], 20)
            }
            .padding(.bottom, 20)
        }
        .sheet(isPresented: $showingImagePicker, onDismiss: loadImage) {
            ImagePicker(image: self.$inputImage)
        }
    }
    
    var avatarSection: some View {
        ZStack {
            if let avatarImage = avatarImage {
                avatarImage
                    .resizable()
                    .scaledToFit()
                    .frame(width: 200, height: 200)
                    .clipShape(Circle())
                    .overlay(Circle().stroke(Color.gray, lineWidth: 4))
            } else {
                Circle()
                    .frame(width: 200, height: 200)
                    .overlay(Circle().stroke(Color.gray, lineWidth: 4))
            }
        }
        .onTapGesture {
            self.showingImagePicker = true
        }
    }
    
    func loadImage() {
        guard let inputImage = inputImage else { return }
        avatarImage = Image(uiImage: inputImage)
    }
}


struct ImagePicker: UIViewControllerRepresentable {
    @Environment(\.presentationMode) var presentationMode
    @Binding var image: UIImage?
    
    func makeUIViewController(context: Context) -> UIImagePickerController {
        let picker = UIImagePickerController()
        if UIImagePickerController.isSourceTypeAvailable(.camera) {
            picker.sourceType = .camera
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            print("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
        }
        picker.delegate = context.coordinator
        return picker
    }
    
    func updateUIViewController(_ uiViewController: UIImagePickerController, context: Context) {}
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, UINavigationControllerDelegate, UIImagePickerControllerDelegate {
        let parent: ImagePicker
        
        init(_ parent: ImagePicker) {
            self.parent = parent
        }
        
        func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
            print("–ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            if let uiImage = info[.originalImage] as? UIImage {
                parent.image = uiImage
                print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ")
            }
            parent.presentationMode.wrappedValue.dismiss()
        }
        
        func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
            print("–í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω")
            parent.presentationMode.wrappedValue.dismiss()
        }
    }

}

struct SettingsView_Previews: PreviewProvider {
    static var previews: some View {
        SettingsView()
    }
}

