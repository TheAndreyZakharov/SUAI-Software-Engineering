
//
//  ContentView.swift
//  Game
//
//  Created by –ê–Ω–¥—Ä–µ–π –ó–∞—Ö–∞—Ä–æ–≤ on 28.02.2024.
//

import SwiftUI
import AVFoundation

struct ContentView: View {
    @State private var userGuess: Double = 5
    @State private var randomNumber = Int.random(in: 1...10)
    @State private var showAlert = false
    @State private var alertTitle = ""
    @State private var isHintEnabled: Bool = false
    @State private var numberRange = "1 - 10"
    let numberRanges = ["1 - 5", "1 - 10", "1 - 20"]
    @State private var balance: Int = 10000
    @State private var betAmount: Int = 100
    @State private var logRecords: [String] = []
    
    var body: some View {
        TabView {
            // –í–∫–ª–∞–¥–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
            gameView()
                .tabItem {
                    Label("–ò–≥—Ä–∞", systemImage: "gamecontroller")
                }
                .tag(1)
            
            // –í–∫–ª–∞–¥–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
            ShopView(balance: $balance, logRecords: $logRecords)
                .tabItem {
                    Label("–ú–∞–≥–∞–∑–∏–Ω", systemImage: "cart")
                }
                .tag(2)
            
            // –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
            LogView(logs: logRecords)
                .tabItem {
                    Label("–õ–æ–≥", systemImage: "book")
                }
                .tag(3)
            
            SettingsView() // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–¥–∏—Ç–µ —ç—Ç—É –≤—å—é
                .tabItem {
                    Label("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", systemImage: "gear")
                }
                .tag(4)
        
        }
    }
    
    func gameView() -> some View {
        NavigationView {
            VStack {
                Text("üé∞")
                    .font(.largeTitle)
                    .padding()
                Text("–ò–≥—Ä–∞")
                    .font(.title)
                    .padding()
                
                HStack {
                    VStack {
                        Text("–ë–∞–ª–∞–Ω—Å:")
                            .font(.headline)
                        Text("\(balance)ü™ô")
                            .font(.title2)
                    }
                    Spacer()
                    VStack {
                        Text("–°—Ç–∞–≤–∫–∞:")
                            .font(.headline)
                        TextField("100", value: $betAmount, format: .number)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                            .keyboardType(.numberPad)
                            .frame(width: 80)
                    }
                }
                .padding()
                Spacer(minLength: 10)
                
                Text("–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ")
                    .font(.title)
                Spacer(minLength: 20)
                
                Picker("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª", selection: $numberRange) {
                    ForEach(numberRanges, id: \.self) {
                        Text($0)
                    }
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding()
                .onChange(of: numberRange) { _ in
                    updateRandomNumber()
                }
                Text("–í—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: \(Int(userGuess))")
                
                Slider(value: $userGuess, in: 1...CGFloat(getUpperRangeLimit()), step: 1)
                    .padding()
                
                Toggle("–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏", isOn: $isHintEnabled)
                    .padding()
                Spacer(minLength: 20)
                
                Button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å") {
                    checkGuess()
                }
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)
                Spacer(minLength: 20)
                
                    .alert(isPresented: $showAlert) {
                        Alert(title: Text(alertTitle), dismissButton: .default(Text("OK")))
                    }
                Spacer(minLength: 20)
            }
            .padding()
        }
    }
    
    func updateRandomNumber() {
        let limit = getUpperRangeLimit()
        randomNumber = Int.random(in: 1...limit)
        userGuess = min(userGuess, Double(limit))
    }
    
    func getUpperRangeLimit() -> Int {
        switch numberRange {
        case "1 - 20":
            return 20
        case "1 - 5":
            return 5
        default: // "1 - 10"
            return 10
        }
    }
    
    func checkGuess() {
        if betAmount > balance {
            alertTitle = "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å!"
            showAlert = true
            return
        }
        
        balance -= betAmount
        let guess = Int(userGuess)
        
        if guess == randomNumber {
            var winMultiplier = 1.0
            switch numberRange {
            case "1 - 5":
                winMultiplier = 2.0
            case "1 - 10":
                winMultiplier = 5.0
            case "1 - 20":
                winMultiplier = 10.0
            default:
                break
            }
            
            let winAmount = Int(Double(betAmount) * winMultiplier)
            balance += winAmount
            alertTitle = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!"
            logRecords.append("‚úÖ –í—ã–∏–≥—Ä—ã—à: \(winAmount)ü™ô –≤ —Ä–µ–∂–∏–º–µ \(numberRange)")
            flashLight() // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∏–≥–∞–Ω–∏—è —Ñ–æ–Ω–∞—Ä–∏–∫–∞

            updateRandomNumber()
            
        } else {
            if isHintEnabled {
                if guess < randomNumber {
                    alertTitle = "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–∏—Å–ª–æ –ø–æ–±–æ–ª—å—à–µ."
                } else {
                    alertTitle = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–∏—Å–ª–æ –ø–æ–º–µ–Ω—å—à–µ."
                }
            } else {
                alertTitle = "–ù–µ —É–≥–∞–¥–∞–ª–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            }
            logRecords.append("‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: \(betAmount)ü™ô –≤ —Ä–µ–∂–∏–º–µ \(numberRange)")
        }
        
        showAlert = true
    }
    func flashLight() {
        guard let device = AVCaptureDevice.default(for: .video), device.hasTorch else {
            NSLog("Torch (Flashlight) is not available on this device.")
            return
        }
        do {
            try device.lockForConfiguration()
            for _ in 1...3 {
                NSLog("Torch (Flashlight) state changing.")
                device.torchMode = .on
                device.torchMode = .off
                Thread.sleep(forTimeInterval: 0.1)
            }
            device.unlockForConfiguration()
        } catch {
            NSLog("Error occurred while trying to access torch (flashlight): \(error.localizedDescription)")
        }
    }
}

// Preview section
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
